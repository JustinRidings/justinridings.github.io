@using System.Reflection
@using System.Runtime.Versioning

@inject IMessageService MessageService

@inherits LayoutComponentBase

<FluentLayout>
    <FluentHeader Style="background-color: var(--neutral-layer-4)">
        <div style="padding-right:10px">
            <a href="@githubProfile">
                <img role="button" src="@githubProfilePic" class="face" href="@githubProfile" title="@githubProfile" />
            </a>
        </div>
        <FluentLabel Typo="Typography.H6">Justin Ridings</FluentLabel>
        <FluentSpacer />
        <FluentSwitch ValueChanged="ChangeDesignTheme" Label="@Mode.ToString()" Style="padding-right:10px" />
        <NotificationCenter />
    </FluentHeader>
    <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
        <NavMenu />
        <FluentBodyContent>
            <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center" Class="content">
                @Body
            </FluentStack>
        </FluentBodyContent>
    </FluentStack>
    <FluentFooter Style="background-color: var(--neutral-layer-4); justify-content:center;">
        <FluentLabel Typo="Typography.H6">Powered by @GetFrameworkVersion()</FluentLabel>
    </FluentFooter>
    <FluentDialogProvider @rendermode="@RenderMode.InteractiveWebAssembly" />
    <FluentDesignTheme @bind-Mode=Mode StorageName="theme" />
</FluentLayout>

@code {

    public DesignThemeModes Mode { get; set; }

    readonly string githubProfile = @"http://github.com/JustinRidings";
    readonly string githubProfilePic = @"https://avatars.githubusercontent.com/u/49916830";

    // protected override void OnAfterRender(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         MessageService.ShowMessageBar(options =>
    //                 {
    //                     options.Intent = MessageIntent.Info;
    //                     options.Title = $"Example";
    //                     options.Body = "This is an example notification!";
    //                     options.Timestamp = DateTime.Now;
    //                     options.Section = "MESSAGE_CENTER";
    //                 });
    //     }
    // }

    public static string GetFrameworkVersion()
    {
        var tfAttribute = Assembly.GetExecutingAssembly().GetCustomAttribute<TargetFrameworkAttribute>();

        return tfAttribute?.FrameworkDisplayName ?? "Blazor WASM";
    }

    public void ChangeDesignTheme(bool isLightMode)
    {
        if (isLightMode == true)
        {
            Mode = DesignThemeModes.Light;
            return;
        }
        else
        {
            Mode = DesignThemeModes.Dark;
            return;
        }
    }
}