@page "/bored"
@using Newtonsoft.Json

@inject HttpClient Http

<PageTitle>Bored</PageTitle>

<FluentCard Style="padding-top:20%">
    <FluentStack Orientation="Orientation.Vertical"
                 HorizontalAlignment="HorizontalAlignment.Center"
                 VerticalAlignment="VerticalAlignment.Center"
                 VerticalGap="20"
                 Style="max-height:fit-content; max-width:auto">
        @if (isLoading == false)
        {
            <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center" VerticalAlignment="VerticalAlignment.Center">
                <FluentSpacer Width="20" />
                @if (Result != null)
                {
                    <FluentLabel Typo="Typography.HeroTitle">
                        @if (Result.Link != null && Result.Link != string.Empty)
                        {
                            <a href="@Result.Link">
                                <strong>
                                    @Result.Activity
                                </strong>
                            </a>
                        }
                        else
                        {
                            <a>
                                <strong>
                                    @Result.Activity
                                </strong>
                            </a>
                        }
                    </FluentLabel>
                    <FluentSpacer />

                }
            </FluentStack>
        }
        else
        {
            <FluentProgressRing />
        }
    </FluentStack>
    <FluentSpacer />
    <FluentStack HorizontalAlignment="HorizontalAlignment.Center">
        <FluentButton IconStart=@(new Icons.Regular.Size16.LightbulbPerson()) Appearance="Appearance.Accent" OnClick="GetActivityAsync">
            I'm bored...
        </FluentButton>
    </FluentStack>
</FluentCard>

@code {
    bool isLoading { get; set; }
    public ActivityResult? Result { get; set; }
    public System.Timers.Timer Time { get; set; } = new System.Timers.Timer(3000);

    private async Task GetActivityAsync()
    {
        isLoading = true;

        var queryResult = await Http.GetAsync($"https://www.boredapi.com/api/activity/");
        Result = JsonConvert.DeserializeObject<ActivityResult?>(await queryResult.Content.ReadAsStringAsync() ?? string.Empty) ?? null;

        isLoading = false;
    }

}
